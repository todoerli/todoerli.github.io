<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Oracle存储过程学习笔记]]></title>
      <url>http://www.chunfengshini.com/post/notes_for_oracle_procedure/</url>
      <content type="html"><![CDATA[<p>记录下Oracle存储过程的基本语法等知识。<br><a id="more"></a></p>
<h1 id="存储过程基本语法"><a href="#存储过程基本语法" class="headerlink" title="存储过程基本语法"></a>存储过程基本语法</h1><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] <span class="keyword">PROCEDURE</span> [ SCHEMA.]存储过程名</div><div class="line">[(</div><div class="line">	[参数<span class="number">1</span> [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] 类型<span class="number">1</span> [<span class="keyword">DEFAULT</span> value1],</div><div class="line">	[参数<span class="number">2</span> [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] 类型<span class="number">2</span> [<span class="keyword">DEFAULT</span> value2]],</div><div class="line">	……</div><div class="line">	[参数n [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | <span class="keyword">IN</span> <span class="keyword">OUT</span> ]] 类型n [<span class="keyword">DEFAULT</span> valuen]</div><div class="line">)]</div><div class="line">[ <span class="keyword">AUTHID</span> &#123; <span class="keyword">current_user</span> | definer &#125;]</div><div class="line">&#123; <span class="keyword">IS</span> | <span class="keyword">AS</span> &#125;</div><div class="line">  &lt;声明部分&gt; </div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  &lt;执行部分&gt;</div><div class="line"><span class="keyword">EXCEPTION</span></div><div class="line">  &lt;可选的异常错误处理程序&gt;</div><div class="line"><span class="keyword">END</span> 存储过程名;</div></pre></td></tr></table></figure>
<p>[]中指令是可选的。其中，AUTHID 指令可以告诉ORACLE该存储过程使用谁的权限运行。默任情况下，存储过程会作为调用者的过程运行。<br>IS或者AS关键词表明后面将跟随一个PL/SQL体，BEGIN关键词表明PL/SQL体的开始。PL/SQL体中至少需要有一句，如果写NULL PL/SQL语句表明什么都不做。<br>END关键词表明PL/SQL体的结束。</p>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><p>存储过程建立完成后，只要通过授权，用户就可以在SQLPLUS 、ORACLE开发工具或第三方开发工具中来调用运行。对于参数的传递也有三种：<strong>按位置传递</strong>、<strong>按名称传递</strong>和<strong>组合传递</strong>，传递方法与函数的一样。ORACLE <em>可以使用EXECUTE语句来实现对存储过程的调用：</em><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC 存储过程名( 参数1, 参数2…,参数n);</div></pre></td></tr></table></figure></p>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名;</div></pre></td></tr></table></figure>
<h1 id="2-PL-SQL基础"><a href="#2-PL-SQL基础" class="headerlink" title="2. PL/SQL基础"></a>2. PL/SQL基础</h1><blockquote>
<p><a href="http://baike.baidu.com/view/470171.htm" target="_blank" rel="external">PL/SQL</a>是过程化SQL语言，是Oracle对标准数据库语言SQL的过程化扩充，它将数据库技术和过程化程序设计语言联系起来，是一种应用开发语言，可使用循环，分支处理数据，将SQL的数据操纵功能与过程化语言数据处理功能结合起来.PL/SQL的使用，使SQL成为一种高级程序设计语言，支持高级语言的块操作，条件判断，循环语句，嵌套等，与数据库核心的数据类型集成，使SQL 的程序设计效率更高.<br>PL/SQL块由四个基本部分组成：<strong>声明</strong>、<strong>执行体开始</strong>、<strong>异常处理</strong>、<strong>执行体结束</strong>。</p>
</blockquote>
<h2 id="PL-SQL块的基本结构"><a href="#PL-SQL块的基本结构" class="headerlink" title="PL/SQL块的基本结构"></a>PL/SQL块的基本结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">DECLARE</span>]</div><div class="line">&lt;声明语句 &gt;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">&lt;执行语句&gt;</div><div class="line">[<span class="keyword">EXCEPTION</span>]</div><div class="line">&lt;异常处理语句 &gt;</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure>
<p>[]中是可选部分。<br>PL/SQL块的书写必须遵循如下规定：<br>（1）PL/SQL块的每一条语句都必须以分号”;”结束；<br>（2）SQL语句可以是多行的，但分号表示该语句的结束。<br>（3）一行中可以有多条SQL语句，它们之间以分号分隔。<br>（4）每一个PL/SQL块由BEGIN或DECLARE开始，以END结束。<br>（5）语句的注释由”–”标示。  </p>
<h2 id="PL-SQL块类型"><a href="#PL-SQL块类型" class="headerlink" title="PL/SQL块类型"></a>PL/SQL块类型</h2><p>PL/SQL程序块分为：</p>
<pre><code>1. 命名块；
2. 匿名块；
3. 子程序；
4. 触发器。
</code></pre><p>其中子程序包括：函数，过程和包。</p>
<p>一个匿名块：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> </div><div class="line">   A1  <span class="built_in">number</span>(<span class="number">10</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">   A1 := <span class="number">2017</span>;</div><div class="line">   dbms_output.putline (A1);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<p>可以就看到<em>变量赋值</em>是通过<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">变量名 := 值;</div></pre></td></tr></table></figure></p>
<p>的形式。</p>
<p>一个命名块ABC：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span>  ABC(<span class="keyword">name</span>  <span class="keyword">out</span>  EMP.ename%<span class="keyword">TYPE</span>)</div><div class="line">    <span class="keyword">AS</span> </div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">      <span class="keyword">SELECT</span> ename <span class="keyword">INTO</span> <span class="keyword">name</span> <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> empno=<span class="number">2017</span>;</div><div class="line">      dbms_output.putline(name);</div><div class="line">   <span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>
<thead>
<tr>
<th style="text-align:center">类型标识符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Number(n)</td>
<td style="text-align:center">n位数字</td>
</tr>
<tr>
<td style="text-align:center">Int（或integer）</td>
<td style="text-align:center">整型数</td>
</tr>
<tr>
<td style="text-align:center">Char(n)</td>
<td style="text-align:center">定长字符型，n位字符。最大255个字符</td>
</tr>
<tr>
<td style="text-align:center">Varchar2(n)</td>
<td style="text-align:center">变长字符型，n位字符。最大2000个字符</td>
</tr>
<tr>
<td style="text-align:center">Long</td>
<td style="text-align:center">变长字符型，最长2GB</td>
</tr>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">日期型</td>
</tr>
</tbody>
</table>
<h3 id="使用-type定义变量"><a href="#使用-type定义变量" class="headerlink" title="使用%type定义变量"></a>使用%type定义变量</h3><p>为了让PL/SQL中变量的类型和数据表中的字段的数据类型一致，Oracle 提供了%type定义方法。语法格式如下：</p>
<pre><code>&lt;变量名称&gt;  &lt;变量名|字段名&gt;%TYPE;
</code></pre><p>其中，如果是如下形式：</p>
<pre><code>&lt;变量名称&gt;  &lt;变量名&gt;%TYPE;
</code></pre><p>表明&lt;变量名称&gt;和&lt;变量名&gt;的类型是相同的。</p>
<p>如果是如下形式：</p>
<pre><code>&lt;变量名称&gt;  &lt;字段名&gt;%TYPE;
</code></pre><p>表明&lt;变量名称&gt;和&lt;字段名&gt;的类型是相同的。例如：</p>
<pre><code>V_NAME  EMP.ENAME%TYPE;
</code></pre><p>但是<strong> 当数据表的字段类型修改后，PL/SQL程序中相应变量的类型也<em> 自动修改 </em> </strong>。</p>
<h2 id="常量、变量和表达式"><a href="#常量、变量和表达式" class="headerlink" title="常量、变量和表达式"></a>常量、变量和表达式</h2><h3 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h3><p>变量和常量都是标识符，定义格式基本相同。</p>
<p>定义变量的语法格式如下：<br>    变量名称  数据类型;</p>
<p>定义常量的语法格式如下：<br>    常量名 CONSTANT 数据标识符 [NOT NULL] := 值;</p>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>变量、常量经常需要组成各种表达式来进行运算，下面介绍在PL/SQL中常见表达式的运算规则。</p>
<ol>
<li><p>数值表达式。PL/SQL程序中的数值表达式是由数值型常数、变量、函数和算术运算符组成的，可以使用的算术运算符包括+（加法）、-（减法）、<em>（乘法）、/（除法）和*</em>（乘方）等。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> serveroutput <span class="keyword">ON</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">   <span class="keyword">result</span> <span class="built_in">number</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">   <span class="keyword">result</span>:= <span class="number">100</span>+<span class="number">23</span>*<span class="number">12</span> - <span class="number">5</span>**<span class="number">2</span>;</div><div class="line">   dbms_output.put_line('运算结果是:'||to_char(result));</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>字符表达式。字符表达式由字符型常数、变量、函数和字符运算符组成，唯一可以使用的字符运算符就是连接运算符”||”。</p>
</li>
<li>关系表达式。关系表达式由字符表达式或数值表达式与关系运算符组成，可以使用的关系运算符如下表所示。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">=</td>
<td style="text-align:center">等于（不是赋值运算符:=）</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">like</td>
<td style="text-align:center">类似于</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">in</td>
<td style="text-align:center">在…之中</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">between</td>
<td style="text-align:center">在…之间</td>
</tr>
</tbody>
</table>
<h2 id="键盘输入和屏幕输出"><a href="#键盘输入和屏幕输出" class="headerlink" title="键盘输入和屏幕输出"></a>键盘输入和屏幕输出</h2><blockquote>
<p><strong>键盘输入</strong>是通过在变量名前面加一个“&amp;”符号实现的，如：&amp;V_INPUT。如果此变量是数值型（如：number，integer等），在提示输入时直接输入数据；如果此变量是字符型（如：varchar2()等），有两个办法输入：</p>
<ol>
<li>如果书写时是：&amp;V_INPUT，那么输入时要加单引号“’”把字符串引起来；</li>
<li>如果书写时是：’&amp;V_INPUT’，那么输入时不要加单引号，直接输入字符串。</li>
</ol>
</blockquote>
<p><strong>屏幕输出</strong>是通过dbms_output.put_line函数输出的。dbms_output.put_line()语句是Oracle 内置的包，它可以使用SQL*Plus 从PL/SQL中输出信息。<br>如：dbms_output.put_line(VARP);</p>
<h2 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h2><h3 id="IF…THEN-语句"><a href="#IF…THEN-语句" class="headerlink" title="IF…THEN 语句"></a>IF…THEN 语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IF 比较条件 THEN</div><div class="line">    <span class="keyword">BEGIN</span> </div><div class="line">       <span class="keyword">do</span> something</div><div class="line">    <span class="keyword">END</span>;</div><div class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</div></pre></td></tr></table></figure>
<h3 id="IF…THEN…ELSE语句"><a href="#IF…THEN…ELSE语句" class="headerlink" title="IF…THEN…ELSE语句"></a>IF…THEN…ELSE语句</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IF condition THEN</div><div class="line">   &lt;语句组&gt;</div><div class="line">   …</div><div class="line">ELSE</div><div class="line">   &lt;语句组&gt;</div><div class="line">   …</div><div class="line">END IF</div></pre></td></tr></table></figure>
<h3 id="IF…THEN…ELSIF语句"><a href="#IF…THEN…ELSIF语句" class="headerlink" title="IF…THEN…ELSIF语句"></a>IF…THEN…ELSIF语句</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">IF condition1 THEN</div><div class="line">  &lt;语句组1&gt;</div><div class="line">  …</div><div class="line">ELSIF condition2 THEN</div><div class="line">  &lt;语句组2&gt;</div><div class="line">  …</div><div class="line">ELSIF condition3 THEN</div><div class="line">  &lt;语句组3&gt;</div><div class="line">  …</div><div class="line">ELSE</div><div class="line">  &lt;语句组4&gt;</div><div class="line">  …</div><div class="line">END IF;</div><div class="line">  &lt;语句组5&gt;</div><div class="line">  …</div></pre></td></tr></table></figure>
<p>如果条件condition1为TRUE，则执行语句组1，然后执行语句组5；<br>否则判断语句组2是否为TRUE，若为TRUE则执行语句组2，然后执行语句组5；<br>对于语句组3也是相同的，如果语句组1、语句组2、语句组3都不成立，那么将执行语句组4，然后执行语句组5。</p>
<h3 id="CASE-语句"><a href="#CASE-语句" class="headerlink" title="CASE 语句"></a>CASE 语句</h3><p>CASE语句的功能：首先设定变量的值作为条件，然后顺序检查表达式，一旦从中找到与条件匹配的表达式的值，就停止CASE语句的处理。例如，变量的值如果与值2的值相同，那么执行语句2，然后停止CASE。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CASE变量</div><div class="line">WHEN 值1  THEN 语句1;</div><div class="line">WHEN 值2  THEN 语句2;</div><div class="line">WHEN 值3  THEN 语句3;</div><div class="line">WHEN 值4  THEN 语句4;</div><div class="line">ELSE 语句5;</div><div class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</div></pre></td></tr></table></figure></p>
<h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><h3 id="LOOP…EXIT-WHEN…END-LOOP循环控制"><a href="#LOOP…EXIT-WHEN…END-LOOP循环控制" class="headerlink" title="LOOP…EXIT WHEN…END LOOP循环控制"></a>LOOP…EXIT WHEN…END LOOP循环控制</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOOP</div><div class="line">&lt;语句组&gt;</div><div class="line">EXIT WHEN &lt;条件&gt;;</div><div class="line">END LOOP;</div></pre></td></tr></table></figure>
<h3 id="LOOP…IF…THEN-EXIT…END-LOOP循环控制"><a href="#LOOP…IF…THEN-EXIT…END-LOOP循环控制" class="headerlink" title="LOOP…IF…THEN EXIT…END LOOP循环控制"></a>LOOP…IF…THEN EXIT…END LOOP循环控制</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LOOP</div><div class="line">&lt;语句组&gt;</div><div class="line">IF 条件 THEN</div><div class="line">    EXIT;</div><div class="line">  END IF;</div><div class="line">END LOOP;</div></pre></td></tr></table></figure>
<h3 id="WHILE…LOOP…END-LOOP循环控制"><a href="#WHILE…LOOP…END-LOOP循环控制" class="headerlink" title="WHILE…LOOP…END LOOP循环控制"></a>WHILE…LOOP…END LOOP循环控制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WHILE 条件 LOOP</div><div class="line">    执行语句段;</div><div class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span>;</div></pre></td></tr></table></figure>
<h3 id="FOR…LOOP循环控制"><a href="#FOR…LOOP循环控制" class="headerlink" title="FOR…LOOP循环控制"></a>FOR…LOOP循环控制</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FOR counter IN  start_range…end_range LOOP</div><div class="line">&lt;语句组&gt;;</div><div class="line">END LOOP;</div></pre></td></tr></table></figure>
<p>其中：<br>（1）counter是循环变量。<br>（2）start_range是循环变量的起始值，end_range是循环变量的终止值。<br>（3）如果要退出FOR循环可以使用EXIT语句。</p>
<h2 id="PL-SQL的异常"><a href="#PL-SQL的异常" class="headerlink" title="PL/SQL的异常"></a>PL/SQL的异常</h2><p>异常处理就是针对错误进行处理的程序段，Oracle的异常处理分为：</p>
<pre><code>1. PL/SQL的异常；
2. 预定义异常；
3. 自定义异常。
</code></pre><h3 id="PL-SQL异常"><a href="#PL-SQL异常" class="headerlink" title="PL/SQL异常"></a>PL/SQL异常</h3><p>异常处理块中包含了与异常相关的错误发生以及当错误发生时要进行执行和处理的代码。异常部分的语法一般如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BEGIN</span></div><div class="line">…</div><div class="line"><span class="keyword">EXCEPTION</span></div><div class="line"><span class="keyword">WHEN</span> excep_name1 <span class="keyword">THEN</span></div><div class="line">  …</div><div class="line"><span class="keyword">WHEN</span> excep_name2 <span class="keyword">THEN</span></div><div class="line">  …</div><div class="line"><span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></div><div class="line">  …</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<p>其中<excep_name1>和&lt; excep_name2&gt;都是异常名称。    </excep_name1></p>
<h3 id="系统预定义异常"><a href="#系统预定义异常" class="headerlink" title="系统预定义异常"></a>系统预定义异常</h3><table>
<thead>
<tr>
<th style="text-align:center">异常名称</th>
<th style="text-align:center">ORACLE错误</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CURSOR_ALREADY_OPEN</td>
<td style="text-align:center">ORA-6511</td>
<td style="text-align:center">试图打开一个已打开的光标</td>
</tr>
<tr>
<td style="text-align:center">DUP_VAL_ON_INDEX</td>
<td style="text-align:center">ORA-0001</td>
<td style="text-align:center">试图破坏一个唯一性限制</td>
</tr>
<tr>
<td style="text-align:center">INVALID_CURSOR</td>
<td style="text-align:center">ORA-1001</td>
<td style="text-align:center">试图使用一个无效的光标</td>
</tr>
<tr>
<td style="text-align:center">INVALID_NUMBER</td>
<td style="text-align:center">ORA-1722</td>
<td style="text-align:center">试图对非数字值进行数字操作</td>
</tr>
<tr>
<td style="text-align:center">LOGIN_DENIED</td>
<td style="text-align:center">ORA-1017</td>
<td style="text-align:center">无效的用户名或者口令</td>
</tr>
<tr>
<td style="text-align:center">NO_DATA_FOUND</td>
<td style="text-align:center">ORA-1403</td>
<td style="text-align:center">查询未找到数据</td>
</tr>
<tr>
<td style="text-align:center">NOT_LOGGED_ON</td>
<td style="text-align:center">ORA-1012</td>
<td style="text-align:center">还未连接就试图进行数据库操作</td>
</tr>
<tr>
<td style="text-align:center">PROGRAM_ERROR</td>
<td style="text-align:center">ORA-6501</td>
<td style="text-align:center">内部错误</td>
</tr>
<tr>
<td style="text-align:center">ROWTYPE_MISMATCH</td>
<td style="text-align:center">ORA-6504</td>
<td style="text-align:center">主变量和光标的类型不兼容</td>
</tr>
<tr>
<td style="text-align:center">STORAGE_ERROR</td>
<td style="text-align:center">ORA-6500</td>
<td style="text-align:center">内部错误</td>
</tr>
<tr>
<td style="text-align:center">TIMEOUT_ON_RESOURCE</td>
<td style="text-align:center">ORA-0051</td>
<td style="text-align:center">发生超时</td>
</tr>
</tbody>
</table>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>异常不一定必须是Oracle返回的系统错误，用户可以在自己的应用程序中创建可触发及可处理的自定义异常，调用异常处理需要使用Raise语句。<br>1．定义异常处理<br>定义异常处理的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">异常名 <span class="keyword">EXCEPTION</span>;</div></pre></td></tr></table></figure></p>
<p>2．抛出异常<br>抛出异常就是触发异常，通常有三种方法：<br>（1）通过PL/SQL 运行时的引擎抛出异常。<br>（2）使用RAISE 语句。<br>（3）调用RAISE_APPLICATION_ERROR 存储过程。</p>
<p>通常情况都是使用显式方法——RAISE 语句抛出异常，它可以抛出任何异常，不一定限制为预定义的异常。<br>处理语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RAISE 异常名;</div></pre></td></tr></table></figure></p>
<h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>处理异常的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">EXCEPTION</div><div class="line">WHEN 异常名1 THEN</div><div class="line">  异常处理语句段1;</div><div class="line">WHEN 异常名2 THEN</div><div class="line">  异常处理语句段2;</div></pre></td></tr></table></figure></p>
<h1 id="使用Java调用Oracle存储过程"><a href="#使用Java调用Oracle存储过程" class="headerlink" title="使用Java调用Oracle存储过程"></a>使用Java调用Oracle存储过程</h1><h2 id="无返回值的存储过程"><a href="#无返回值的存储过程" class="headerlink" title="无返回值的存储过程"></a>无返回值的存储过程</h2><h3 id="测试建表："><a href="#测试建表：" class="headerlink" title="测试建表："></a>测试建表：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create table</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> TESTTB</div><div class="line">(</div><div class="line">  <span class="keyword">ID</span>   VARCHAR2(<span class="number">30</span>),</div><div class="line">  <span class="keyword">NAME</span> VARCHAR2(<span class="number">30</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程:"></a>存储过程:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> TESTA(PARA1 <span class="keyword">IN</span> VARCHAR2, PARA2 <span class="keyword">IN</span> VARCHAR2) <span class="keyword">AS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> BOM.TESTTB(<span class="keyword">ID</span>, <span class="keyword">NAME</span>) <span class="keyword">VALUES</span> (PARA1, PARA2);</div><div class="line"><span class="keyword">END</span> TESTA;</div></pre></td></tr></table></figure>
<h3 id="在Java里调用"><a href="#在Java里调用" class="headerlink" title="在Java里调用:"></a>在Java里调用:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.yiming.procedure.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.CallableStatement;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProcedureDemo1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestProcedureDemo1</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String driver = <span class="string">"Oracle.jdbc.driver.OracleDriver"</span>;</div><div class="line">		String strUrl = <span class="string">"jdbc:Oracle:thin:@10.20.30.30:1521:vasms"</span>;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		Connection conn = <span class="keyword">null</span>;</div><div class="line">		CallableStatement proc = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(driver);</div><div class="line">			conn = DriverManager.getConnection(strUrl, <span class="string">"bom"</span>, <span class="string">"bom"</span>);</div><div class="line">			proc = conn.prepareCall(<span class="string">"&#123; call BOM.TESTA(?,?) &#125;"</span>);</div><div class="line">			proc.setString(<span class="number">1</span>, <span class="string">"100"</span>);</div><div class="line">			proc.setString(<span class="number">2</span>, <span class="string">"TestOne"</span>);</div><div class="line">			proc.execute();</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">					rs.close();</div><div class="line">					<span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</div><div class="line">						stmt.close();</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">						conn.close();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException ex1) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有返回值的存储过程（非列表）"><a href="#有返回值的存储过程（非列表）" class="headerlink" title="有返回值的存储过程（非列表）"></a>有返回值的存储过程（非列表）</h2><h3 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程:"></a>存储过程:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> TESTB(PARA1 <span class="keyword">IN</span> VARCHAR2, PARA2 <span class="keyword">OUT</span> VARCHAR2) <span class="keyword">AS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">INTO</span> PARA2 <span class="keyword">FROM</span> TESTTB <span class="keyword">WHERE</span> <span class="keyword">ID</span> = PARA1;</div><div class="line"><span class="keyword">END</span> TESTB;</div></pre></td></tr></table></figure>
<h3 id="在Java里调用-1"><a href="#在Java里调用-1" class="headerlink" title="在Java里调用:"></a>在Java里调用:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.yiming.procedure.test;</div><div class="line"></div><div class="line">import java.sql.CallableStatement;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line">import java.sql.Types;</div><div class="line"></div><div class="line">public class TestProcedureDemo2 &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		String driver = "Oracle.jdbc.driver.OracleDriver";</div><div class="line">		String strUrl = "jdbc:Oracle:thin:@10.20.30.30:1521:vasms";</div><div class="line">		Statement stmt = null;</div><div class="line">		ResultSet rs = null;</div><div class="line">		Connection conn = null;</div><div class="line">		CallableStatement proc = null;</div><div class="line">		try &#123;</div><div class="line">			Class.forName(driver);</div><div class="line">			conn = DriverManager.getConnection(strUrl, "bom", "bom");</div><div class="line">			proc = conn.prepareCall("&#123; call BOM.TESTB(?,?) &#125;");</div><div class="line">			proc.setString(1, "100");</div><div class="line">			proc.registerOutParameter(2, Types.VARCHAR);</div><div class="line">			proc.execute();</div><div class="line">			String testPrint = proc.getString(2);</div><div class="line">			System.out.println("=testPrint=is=" + testPrint);</div><div class="line">		&#125; catch (SQLException ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; catch (Exception ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; finally &#123;</div><div class="line">			try &#123;</div><div class="line">				if (rs != null) &#123;</div><div class="line">					rs.close();</div><div class="line">					if (stmt != null) &#123;</div><div class="line">						stmt.close();</div><div class="line">					&#125;</div><div class="line">					if (conn != null) &#123;</div><div class="line">						conn.close();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; catch (SQLException ex1) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>，这里的proc.getString(2)中的数值2并非任意的，而是和存储过程中的out列对应的，如果out是在第一个位置，那就是proc.getString(1)，如果是第三个位置，就是proc.getString(3)，当然也可以同时有多个返回值，那就是再多加几个out参数了。</p>
<h2 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h2><p><strong>由于Oracle存储过程没有返回值，它的所有返回值都是通过<em>out参数</em>来替代的</strong>，列表同样也不例外，但由于是集合，所以不能用一般的参数，必须要用pagkage了.所以要分两部分:</p>
<h3 id="1-建一个程序包"><a href="#1-建一个程序包" class="headerlink" title="1. 建一个程序包"></a>1. 建一个程序包</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PACKAGE</span> TESTPACKAGE <span class="keyword">AS</span></div><div class="line">  <span class="keyword">TYPE</span> TEST_CURSOR <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>;</div><div class="line"><span class="keyword">end</span> TESTPACKAGE;</div></pre></td></tr></table></figure>
<h3 id="2-建立存储过程"><a href="#2-建立存储过程" class="headerlink" title="2. 建立存储过程"></a>2. 建立存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> TESTC(P_CURSOR <span class="keyword">out</span> TESTPACKAGE.TEST_CURSOR) <span class="keyword">IS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">OPEN</span> P_CURSOR <span class="keyword">FOR</span></div><div class="line">    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOM.TESTTB;</div><div class="line"><span class="keyword">END</span> TESTC;</div></pre></td></tr></table></figure>
<p>可以看到，它是把游标（可以理解为一个指针），作为一个out 参数来返回值的。</p>
<h3 id="3-在Java里调用"><a href="#3-在Java里调用" class="headerlink" title="3. 在Java里调用"></a>3. 在Java里调用</h3><p><em>在这里要注意，在执行前一定要先把Oracle的驱动包放到class路径里，否则会报错</em><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.yiming.procedure.test;</div><div class="line"></div><div class="line">import java.sql.CallableStatement;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line"></div><div class="line">public class TestProcedureDemo3 &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		String driver = "Oracle.jdbc.driver.OracleDriver";</div><div class="line">		String strUrl = "jdbc:Oracle:thin:@10.20.30.30:1521:vasms";</div><div class="line">		Statement stmt = null;</div><div class="line">		ResultSet rs = null;</div><div class="line">		Connection conn = null;</div><div class="line">		CallableStatement proc = null;</div><div class="line">		try &#123;</div><div class="line">			Class.forName(driver);</div><div class="line">			conn = DriverManager.getConnection(strUrl, "bom", "bom");</div><div class="line">			proc = conn.prepareCall("&#123; call bom.testc(?) &#125;");</div><div class="line">			proc.registerOutParameter(1, Oracle.jdbc.OracleTypes.CURSOR);</div><div class="line">			proc.execute();</div><div class="line">			rs = (ResultSet) proc.getObject(1);</div><div class="line"></div><div class="line">			while (rs.next()) &#123;</div><div class="line">				System.out.println("&lt;tr&gt;&lt;td&gt;" + rs.getString(1) + "&lt;/td&gt;&lt;td&gt;"</div><div class="line">						+ rs.getString(2) + "&lt;/td&gt;&lt;/tr&gt;");</div><div class="line">			&#125;</div><div class="line">		&#125; catch (SQLException ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; catch (Exception ex2) &#123;</div><div class="line">			ex2.printStackTrace();</div><div class="line">		&#125; finally &#123;</div><div class="line">			try &#123;</div><div class="line">				if (rs != null) &#123;</div><div class="line">					rs.close();</div><div class="line">					if (stmt != null) &#123;</div><div class="line">						stmt.close();</div><div class="line">					&#125;</div><div class="line">					if (conn != null) &#123;</div><div class="line">						conn.close();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; catch (SQLException ex1) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符集与字符编码笔记]]></title>
      <url>http://www.chunfengshini.com/post/notes_for_character_set/</url>
      <content type="html"><![CDATA[<blockquote>
<p>早期字符编码、字符集和代码页等概念都是表达同一个意思。例如GB2312字符集、GB2312编码，936代码页，实际上说的是同一件事物。但是对于Unicode则不同，<strong>Unicode字符集</strong>只是定义了字符的集合和唯一编号，<strong>Unicode编码</strong>，则是对UTF-8、UCS-2/UTF-16等具体编码方案的统称。</p>
</blockquote>
<a id="more"></a>
<h1 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h1><hr>
<p><strong>1.1 <a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" title="字符集和字符编码（Charset &amp; Encoding）" target="_blank" rel="external">字符集(Charset)</a> </strong>: 是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。例如，ASCII字符集中定义了128个字符。</p>
<p><strong>1.2 <a href="http://www.kuqin.com/shuoit/20140728/341430.html" title="关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）" target="_blank" rel="external">字符码(Code Point)</a>
</strong>：指的就是字符集中每个字符的数字编号。例如ASCII字符集用0-127这连续的128个数字分别表示128个字符；GBK字符集使用区位码的方式为每个字符编号，首先定义一个94X94的矩阵，行称为”区”，列称为”位”，然后将所有国标汉字放入矩阵当中，这样每个汉字就可以用唯一的”区位码”来标识了。例如”中”字被放到54区第48位，因此字符码就是5448。而Unicode中将字符集按照一定的类别划分到0~16这17个层面（Planes）中，每个层面中拥有216=65536个字符码，因此Unicode总共拥有的字符码，也即是Unicode的字符空间总共有17*65536=1114112。</p>
<p><strong>1.3 字符编码(Character Encoding)</strong>：是将字符集中的字符码映射为用来存储的字节流的一种具体实现方案,也就是字符码存储成什么样的二进制形式。例如ASCII字符编码规定使用单字节中低位的7个比特去编码所有的字符。例如’A’的编号是65，用单字节表示就是0x41，因此写入存储设备的时候就是b’01000001’。</p>
<h1 id="从ASCII码说起"><a href="#从ASCII码说起" class="headerlink" title="从ASCII码说起"></a>从ASCII码说起</h1><hr>
<p><strong><a href="https://zh.wikipedia.org/wiki/ASCII" title="ASCII" target="_blank" rel="external">ASCII</a></strong>（<em> <strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，美国信息交换标准代码</em>）是基于拉丁字母的一套电脑编码系统。ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号,它主要用于显示现代英语。</p>
<p>我们所看到的文字，在计算机存储介质中存放的是二进制的比特流。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。为了让计算机知道特定的二进制数字代表的是哪个字符，我们可以自己建立数字与字符的映射关系，但是为了在不同计算机上相互通信而不造成混乱，因此要大家遵守使用相同的标准告诉计算机哪个数字对应哪个字符。美国国家标准协会ANSI制定了一个标准，规定了常用字符的集合以及每个字符对应的二进制表示。</p>
<p><strong>ASCII字符集</strong>：主要包括95个可打印字符（英文大小写字符、阿拉伯数字和英式标点符号）和33个控制字符控制字符（回车键、退格、换行键等）。</p>
<p><strong>ASCII编码</strong>：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。标准ASCII 码也叫基础ASCII码，使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0到9、标点符号， 以及在美式英语中使用的特殊控制字符。</p>
<p><strong>编码</strong>的过程是将字符转换成存储的字节流。</p>
<p><strong>解码</strong>的过程是将存储的字节流解析为字符。</p>
<p>ASCII字符集中用数字编号65表示大写字母A的字符码，编码为二进制的字符流就是’01000001’。</p>
<p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。亚洲国家的文字，<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" title="字符编码笔记：ASCII，Unicode和UTF-8" target="_blank" rel="external">汉字使用的符号就多达10万左右</a>。因此在简体中文常见的编码方式GB2312中，使用两个字节表示一个汉字，理论上最多可以表示256x256=65536个符号。</p>
<h1 id="一统天下的Unicode"><a href="#一统天下的Unicode" class="headerlink" title="一统天下的Unicode"></a>一统天下的Unicode</h1><hr>
<p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。我们可以在一台机器上查阅不同语言的文档，但是我们仍然无法解决一个问题：在一份文档中显示所有字符。为了解决这个问题，我们需要一个巨大的字符集将世界上所有的符号纳入其中，给每一个符号赋予独一无二的字符码，这就是Unicode字符集。Unicode字符集将所有字符按照使用上的频繁度划分为17个层面（Plane），每个层面上有216=65536个字符码空间。其中第0个层面BMP，基本涵盖了当今世界用到的所有字符。但是<strong>Unicode只是一个符号集</strong>，它只规定了符号的字符码或者说二进制代码，却没有规定这个二进制代码应该如何存储。结果就出现了Unicode的多种存储方式，也就是Unicode编码。</p>
<h1 id="编码系统的变化"><a href="#编码系统的变化" class="headerlink" title="编码系统的变化"></a>编码系统的变化</h1><hr>
<p>在Unicode出现之前，所有的字符集都是和具体编码方案绑定在一起的，都是直接将字符和最终字节流绑定死了，例如ASCII编码系统规定使用7比特来编码ASCII字符集；GB2312以及GBK字符集，限定了使用最多2个字节来编码所有字符，并且规定了字节序。这样的编码系统通常用简单的查表，也就是通过代码页就可以直接将字符映射为存储设备上的字节流了。我们知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用3个或4个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费。因此Unicode在设计上将字符集和字符编码方案分离开。也就是说，虽然每个字符在Unicode字符集中都能找到唯一确定的编号（字符码，又称Unicode码），但是决定最终字节流的却是具体的字符编码。例如同样是对Unicode字符’A’进行编码，UTF-8字符编码得到的字节流是0x41，而UTF-16（大端模式）得到的是0x00 0x41。</p>
<h1 id="常见Unicode编码之UTF-8"><a href="#常见Unicode编码之UTF-8" class="headerlink" title="常见Unicode编码之UTF-8"></a>常见Unicode编码之UTF-8</h1><hr>
<p>UTF-8应该是目前互联网上应用最广泛的一种Unicode<strong>编码方案</strong>。UTF-8用1~4个字节来编码字符，根据不同的符号而变化字节长度，<em>是一种变长的编码方案</em>。</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" title="字符编码笔记：ASCII，Unicode和UTF-8" target="_blank" rel="external">UTF-8的编码规则很简单，只有二条</a>：<br>1.对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>2.对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
</blockquote>
<p>具体参见维基百科中<a href="https://zh.wikipedia.org/wiki/UTF-8" title="UTF-8" target="_blank" rel="external">UTF-8</a>条目。</p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h1><p><a href="http://www.kuqin.com/shuoit/20140728/341430.html" title="关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）" target="_blank" rel="external">1.关于字符编码，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）</a><br><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" title="字符集和字符编码（Charset &amp; Encoding）" target="_blank" rel="external">2.字符集和字符编码（Charset &amp; Encoding）</a><br><a href="https://zh.wikipedia.org/wiki/ASCII" title="ASCII" target="_blank" rel="external">3.ASCII</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" title="字符编码笔记：ASCII，Unicode和UTF-8" target="_blank" rel="external">4.字符编码笔记：ASCII，Unicode和UTF-8</a><br><a href="https://zh.wikipedia.org/wiki/UTF-8" title="UTF-8" target="_blank" rel="external">5.UTF-8</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[直到溪亭日暮，沉醉不知归路]]></title>
      <url>http://www.chunfengshini.com/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/</url>
      <content type="html"><![CDATA[<p><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/乌镇.jpg" alt="乌镇"></p>
<p>没想到元旦这三天假，还挺长的，直从2016年放到了2017年。</p>
<p>我本打算用这三天宅起来睡觉追剧放空自己，无奈前面曾不假思索地答应了朋友说去学校找他玩。虽然不假思索可能也就意味着我当时是随口一说，可是话我既然已经说出口了，就没有不兑现的道理，谁让我就是这样靠谱的人呢。</p>
<p>于是2016年的最后一个周六，我6点被闹钟闹醒，早早的完成了一天的工作，偷了一圈儿朋友们的绿色能量后不断“重启”到了晌午。清醒过后，悲从中来，因为回去学校一趟倒腾地铁公交实在是太远了，不禁一下勾起了过去不堪回首的记忆，顿时打起了退堂鼓。可见人的情绪总是反复的，之前答应的事随时可能想反悔。之前想做的事后面也不一定想做，很喜欢的前女友有了现任也不一定敢再说喜欢，能一直喜欢保持言行合一实在是特别难。做个靠谱的人，能够对说过的话负责就很重要了。既如此，我还是想想其他办法吧。</p>
<p>于是，我就想能不能借我哥的车开过去呢。上次借车的时候我问他第二天要不要用车，他说没关系他不用，告诉我开多久就行。不过我第二天就打听到他其实是要上班的，把车给我开他坐地铁去公司，于是我当天下午我就加完油后把车还他了。他为我考虑我也得替他考虑不是？人都这样。这次我就先打听他上班的事，绝口不提借车，了解到他虽然今天不上班，明天就要上班，那么我就不跟他借车了，尽管我知道只要我开口我就有车开。另寻他法，直接租了一辆车开回了学校。 </p>
<p>回到了学校，还是熟悉的地方，到处是陌生的面孔，让人十分紧张，毕竟工作之后从来没有看到过这么多女生。迎面走来的学妹们打扮的花枝招展，洋溢着青春的气息，比起当年他们的学姐，现在学妹们的浓妆淡抹好像略胜一筹，难道作业不够多吗？考试不够难吗？学业压力还不够大吗？想到这里，我不禁为祖国的未来捏一把汗！既然如此，那我就为你们做点榜样吧，赶紧去图书馆转转。来到一楼的阅读空间，一下子就被眼前的一本书吸引，赶紧取下架来细细品读，书名叫《单身社会》。里面说得好像有那么点道理，不过貌似对面的一对学弟学妹不敢苟同，耳语后笑着拉着手就走开了。而我却沉迷学习无法自拔，一直读至深夜还读不完，想从中找寻出点真理可书中说的和我看到的不太一样，真是气不打一处来，还是先去吃饭吧。 </p>
<p>三五老友，相约戒酒。于是晚餐十分文明，一盆烤鱼，一锅牛肉，没了觥筹交错，也有杯盘狼藉，在这样的聚餐里也能悟出些道理——减肥这项事业，终将是一项长期的艰苦卓绝的斗争。饭罢，进得宿舍，胀着肚子在罪恶感中难以入睡。要不是朋友圈中好友们的提醒，当时钟指向0点的那一刻，我的内心可能不会起一丝波澜。想来可惜，如果此时我是睡着的，当2017年醒来，这一觉想想肯定都睡得特别香甜，毕竟是2016年就睡了。现实是，2017年1月1号的一大早，就被吵醒了，因为朋友不得不早起去东海办些有意义的事情。而我不能袖手旁观，任他孤单单的过去实在于心不忍，那就起来送他过去吧。 </p>
<p>一路向东，太阳还未升起，雾气很浓，置身其中，仿佛蓬莱仙境。海边有很多人在静静等着迎接新年的第一缕曙光，我也歪打正着有幸再次领略一番东海的日出。静静地看着东方海天交接的天空一点点的亮起来，看着太阳透过云层，露出她的头顶，起初看不大真切，像看躲在屏风后少女的脸，渐渐露出眼睛，鼻子……忽而整个脸都露出来了，红彤彤的，犹如依偎在恋人肩头少女的脸庞。2017年的第一缕阳光洒向了海面，洒向了大地，伴随着人们的欢呼、希冀和对新年的祝福，喷薄而出。这一刻，让我看到了希望：「它是站在海岸遥望海中已经看得见桅杆尖头了的一只航船，它是立于高山之巅远看东方已见光芒四射喷薄欲出的一轮朝日，它是躁动于母腹中的快要成熟了的一个婴儿。」我相信，「只要我们大家撸起袖子加油干，我们就一定能够走好我们这一代人的长征路。」</p>
<p>说干就干，行胜于言，我和朋友决定去乌镇，立马就走。驱车一百多公里，就来到了京杭大运河走过的江南水乡。误打误撞来到了西栅景区2号门口，准备买票进去之前才发现对乌镇景区一无所知，临时抱佛脚，拿起手机学习了下乌镇景点概况后就一头扎进了她的怀抱里，直到溪亭日暮，沉醉不知归路……</p>
<p><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/黄昏.jpg" alt="乌镇"><br><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/东海日出.jpg" alt="乌镇"><br><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/水岸.jpg" alt="乌镇"><br><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/乌镇邮局.jpg" alt="乌镇"><br><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/乌镇夜色.jpg" alt="乌镇"><br><img src="/post/zhi_dao_xi_ting_ri_mu_chen_zui_bu_zhi_gui_lu/民国时代.jpg" alt="乌镇"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安卓Nexus 6P手机Root后通过FlashFire升级系统]]></title>
      <url>http://www.chunfengshini.com/post/upgrading_rooted_nexus_6p_using_flashfire/</url>
      <content type="html"><![CDATA[<h2 id="简要情况"><a href="#简要情况" class="headerlink" title="简要情况:"></a>简要情况:</h2><p>Nexus 6P升级到Android 7.0 系统后解锁、Root并安装了SuperSU、冰箱等软件。Root之后手机不能通过OTA直接升级系统，但是系统推送过来的安全补丁一直显示在通知栏，很不美观。于是就寻找一些方便的方法升级，了解到可以通过FlashFire这个软件更新系统并继续保持Root状态。</p>
<h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><ol>
<li>将冰箱中的所有应用解冻</li>
<li>通过<a href="https://developers.google.cn/android/images" target="_blank" rel="external">developers.google.cn/android/images</a> 网站下载最新Factory image.比如7.1.1 (N4F26J, Jan 2017).得到angler-n4f26j-factory-01874fd6.zip文件，大小1.25GB。拷贝到手机。</li>
<li><p>打开FlashFire软件，点击右下角+加号，选择Flash firmware package，找到保存到手机的angler-n4f26j-factory-01874fd6.zip文件并选择.FlashFire会分析该镜像文件。<br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/select-img-file.png" alt="Scanning archive"></p>
</li>
<li><p>选择刷入Boot、system、vendor和cache分区，不要选择recovery和data。<br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/ready-to-flash.png" alt="选好要刷入的分区"></p>
</li>
<li><p>点击FLASH开始更新，系统会自动关机重启，更新完之后会再次重启。<br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/notice.png" alt="提示信息"><br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/flashing.jpg" alt="flashing"><br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/finishing-update.png" alt="finishing"><br><img src="/post/upgrading_rooted_nexus_6p_using_flashfire/up-to-date.png" alt="up to date"></p>
</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
